int search(int* nums, int numsSize, int target){
    // 使用二分法的前提是数组是有序的、不能有重复的元素

    // 方法1：target在区间[left, right]内，是一个左闭右闭的区间。

    // 拿中间的是和目标值对比，只有三种情况，要么是大于、要么是小于，要么是等于

    // 如果中间的值大于目标值，那么将右区间缩小，就是将右边界值设置为中间值的前一个位置；---> 否则，将左区间放到中间值的右边 ---> 否则就是相等的了

    int left = 0;
    int right = numsSize - 1;
    int middle;

    for(int i = 0; i < numsSize; i++) {
        middle = (left + right) / 2;
        if(nums[middle] > target) {
            right = middle - 1;
        } else if(nums[left] < target) {
            left = middle + 1;
        } else {
            return middle;     // 否则，这个middle就是我们想找到的下标
        }
    }

    return -1;
    
}



35.搜索插入位置
34.在排序数组中查找元素的第一个和最后一个位置
69.x 的平方根
367.有效的完全平方数
其他语言版本







